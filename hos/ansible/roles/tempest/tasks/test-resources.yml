#
# (c) Copyright 2015-2016 Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
---
# Note: We use the internal Tempest client here so not to have to install
#       venv CLI client.
- name: tempest | test-resources | Check if tempest network exists
  shell: >
    ./neutron
    --os-username "{{ tempest_keystone.admin_user }}"
    --os-project-name "{{ tempest_keystone.admin_tenant }}"
    --os-password "{{ tempest_keystone.admin_pwd }}"
    --os-cacert {{ cacert }}
    --os-auth-url "{{ tempest_auth_url }}"
    --os-region-name "{{ tempest_worker.region_name }}"
    --os-endpoint-type internalURL
    net-show
    {{ tempest_network_name }}
    --field id
    --field router:external
    -f yaml
  args:
    chdir: "{{ tempest_bin_dir }}"
  changed_when: false
  register: public_network_id_result
  when: (tempest_available.neutron | bool)


- name: tempest | test-resources | Check and fail if there is no network set-up
  fail:
    msg: "No {{ tempest_network_name }} found. Please create one"
  when: (tempest_available.neutron | bool) and
        (public_network_id_result | failed)

- name: tempest | test-resources | Download guest OS image UUID from Glance
  shell: >
    ./openstack
    --os-interface=internal
    --os-endpoint internalURL
    --os-project-name "{{ tempest_keystone.admin_tenant }}"
    --os-username "{{ tempest_keystone.admin_user }}"
    --os-password "{{ tempest_keystone.admin_pwd }}"
    --os-cacert {{ cacert }}
    --os-auth-url "{{ tempest_auth_url }}"
    --os-region-name "{{ tempest_worker.region_name }}"
    image list |
    awk '/{{ glance_image_name }}/{print $2; exit}'
  args:
    chdir: "{{ tempest_bin_dir }}"
  changed_when: false
  register: user_image_uuid_result
  when: (tempest_available.glance | bool)

- name: tempest | test-resources | Download Cirros image from Glance
  become: yes
  become_user: "{{ tempest_user }}"
  command: >
    ./openstack
    --os-interface internal
    --os-endpoint internalURL
    --os-project-name "{{ tempest_keystone.admin_tenant }}"
    --os-username "{{ tempest_keystone.admin_user }}"
    --os-password "{{ tempest_keystone.admin_pwd }}"
    --os-cacert {{ cacert }}
    --os-auth-url "{{ tempest_auth_url }}"
    --os-region-name "{{ tempest_worker.region_name }}"
    image save
    --file "{{ tempest_run.dir }}/{{ glance_image_name }}_{{ tempest_worker.region_name }}.img"
    "{{ user_image_uuid_result.stdout }}"
  args:
    chdir: "{{ tempest_bin_dir }}"
    creates: "{{ tempest_run.dir }}/{{ glance_image_name }}_{{ tempest_worker.region_name }}.img"
  when: (tempest_available.glance | bool)

- name: tempest | test-resources | Clear resource configuration
  become: yes
  become_user: "{{ tempest_user }}"
  file:
    path: "{{ tempest_worker.config_parts_dir }}/res_tempest.conf"
    state: absent

- name: tempest | test-resources | Update Tempest config for glance
  become: yes
  become_user: "{{ tempest_user }}"
  ini_file:
    dest: "{{ tempest_worker.config_parts_dir }}/res_tempest.conf"
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  when: (tempest_available.glance | bool) and
        (item.enabled | bool)
  with_items:
    - { enabled: "{{ tempest_available.nova }}",
        section: "compute", option: "image_ref", value: "{{ user_image_uuid_result.stdout }}" }
    - { enabled: "{{ tempest_available.nova }}",
        section: "compute", option: "image_ref_alt", value: "{{ user_image_uuid_result.stdout }}" }
    - { enabled: true,
        section: "scenario", option: "img_file", value: "{{ glance_image_name }}_{{ tempest_worker.region_name }}.img" }
    - { enabled: true,
        section: "scenario", option: "img_dir", value: "{{ tempest_run.dir }}" }
    - { enabled: true,
        section: "validation", option: "image_ssh_user", value: "{{ glance_image_ssh_user }}" }

- name: tempest | test-resources | Update Tempest config for run
  become: yes
  become_user: "{{ tempest_user }}"
  ini_file:
    dest: "{{ tempest_worker.config_parts_dir }}/res_tempest.conf"
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  when: (tempest_available.neutron | bool) and
        (item.enabled | bool) and
        ((public_network_id_result.stdout |
          from_yaml )['router:external'] |
          bool)
  with_items:
    - { enabled: "{{ tempest_available.neutron }}",
        section: "network", option: "public_network_id", value: "{{ (public_network_id_result.stdout | from_yaml ).id }}" }
