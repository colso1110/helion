#
# (c) Copyright 2015,2016 Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
---
- name: vertica | restart | restart all vertica services
  shell: echo ""
  notify:
    - vertica | restart | stop monasca-persister service
    - vertica | restart | stop monasca-api service
    - vertica | restart | pause to allow monasca-api and monasca-persister to fully stop
    - vertica | restart | check vertica service status
    - vertica | restart | close any leftover client connections (when up)
    - vertica | restart | stop vertica service (when up)
    - vertica | restart | pause to allow vertica to fully stop
    - vertica | restart | start vertica service
    - vertica | restart | update vertica license
    - vertica | restart | remove original unencrypted vertica license
    - vertica | restart | remove unencrypted vertica license
    - vertica | restart | remove encrypted vertica license
    - vertica | restart | restart vertica agent service
    - vertica | restart | wait for vertica service port
    - vertica | restart | start monasca-api service
    - vertica | restart | start monasca-persister service
  when: run_mode == 'Configure' or run_mode == 'Upgrade'

- name: vertica | restart | stop monasca-persister service
  service: name=monasca-persister state=stopped
  delegate_to: "{{ item }}"
  with_items: "{{ groups['MON-PST'] }}"
  when: run_mode == 'Configure' or run_mode == 'Upgrade'

- name: vertica | restart | stop monasca-api service
  service: name=monasca-api state=stopped
  delegate_to: "{{ item }}"
  with_items: "{{ groups['MON-API'] }}"
  when: run_mode == 'Configure' or run_mode == 'Upgrade'

- name: vertica | restart | pause to allow monasca-api and monasca-persister to fully stop
  pause: seconds=20

- name: vertica | restart | check vertica service status
  command: /opt/vertica/bin/admintools -t view_cluster -d {{vertica_database_name}}
  sudo_user: dbadmin
  register: running_result
  run_once_per: verb_hosts.FND_VDB
  ignore_errors: yes
  when: run_mode == 'Configure' or run_mode == 'Upgrade'

- name: vertica | restart | close any leftover client connections (when up)
  command: /opt/vertica/bin/vsql -U dbadmin -w '{{ vertica_dbadmin_password | quote }}' -c "SELECT CLOSE_ALL_SESSIONS();"
  sudo_user: dbadmin
  environment: "{{vertica_env}}"
  run_once_per: verb_hosts.FND_VDB
  no_log: True
  when: (run_mode == 'Configure' or run_mode == 'Upgrade') and running_result.stdout.find("UP") != -1

- name: vertica | restart | stop vertica service (when up)
  command: /opt/vertica/bin/admintools -t stop_db -d {{ vertica_database_name }} -p "{{vertica_dbadmin_password| quote }}" -i
  sudo_user: dbadmin
  register: vertica_handler_result
  run_once_per: verb_hosts.FND_VDB
  until: vertica_handler_result | success
  retries: 12
  delay: 15
  when: (run_mode == 'Configure' or run_mode == 'Upgrade') and running_result.stdout.find("UP") != -1

- name: vertica | restart | pause to allow vertica to fully stop
  pause: seconds=10
  when: (run_mode == 'Configure' or run_mode == 'Upgrade') and running_result.stdout.find("UP") != -1

- name: vertica | restart | start vertica service
  command: /opt/vertica/bin/admintools -t start_db -d {{vertica_database_name}} -p "{{vertica_dbadmin_password| quote }}" -i
  sudo_user: dbadmin
  register: status_start
  failed_when: status_start | failed
  run_once_per: verb_hosts.FND_VDB
  when: run_mode == 'Configure' or run_mode == 'Upgrade'

- name: vertica | restart | update vertica license
  command: /opt/vertica/bin/admintools -t upgrade_license_key --license={{vertica_config_dir}}/license.key  -d {{vertica_database_name}} -p "{{vertica_dbadmin_password| quote }}"
  sudo_user: dbadmin
  register: status_update_license
  failed_when: status_update_license | failed
  run_once_per: verb_hosts.FND_VDB
  when: run_mode == 'Configure' or run_mode == 'Upgrade'
  no_log: True

- name: vertica | restart | remove original unencrypted vertica license
  file: path={{vertica_config_dir}}/license.key state=absent
  when: run_mode == 'Configure' or run_mode == 'Upgrade'

- name: vertica | restart | remove unencrypted vertica license
  file: path={{vertica_config_dir}}/share/license.key state=absent
  when: run_mode == 'Configure' or run_mode == 'Upgrade'

- name: vertica | restart | remove encrypted vertica license
  file: path={{vertica_config_dir}}/license.key.gpg state=absent
  when: run_mode == 'Configure' or run_mode == 'Upgrade'

- name: vertica | restart | restart vertica agent service
  service: name=vertica_agent state=restarted
  when: run_mode == 'Configure' or run_mode == 'Upgrade'

- name: vertica | restart | wait for vertica service port
  wait_for: port={{vertica_client_port}} host='127.0.0.1' state=started timeout={{monasca_wait_for_period}}
  when: run_mode == 'Configure' or run_mode == 'Upgrade'

- name: vertica | restart | start monasca-api service
  service: name=monasca-api state=started enabled=yes
  delegate_to: "{{ item }}"
  with_items: "{{ groups['MON-API'] }}"
  when: run_mode == 'Configure' or run_mode == 'Upgrade'

- name: vertica | restart | start monasca-persister service
  service: name=monasca-persister state=started enabled=yes
  delegate_to: "{{ item }}"
  with_items: "{{ groups['MON-PST'] }}"
  when: run_mode == 'Configure' or run_mode == 'Upgrade'
