#
# (c) Copyright 2015,2016 Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
---
- name: vertica | node_setup | Create catalog and data directory
  file: path={{item}} owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=0770 state=directory
  with_items:
    - "{{vertica_home_dir}}"
    - "{{vertica_catalog_dir}}"
    - "{{vertica_data_dir}}"
  notify:
    - vertica | restart | restart all vertica services

- name: vertica | node_setup | Create catalog/database dir when rebuild node
  file: path={{ item }} owner="{{ vertica_dbadmin_user }}" group="{{ vertica_dbadmin_group }}" mode=0775 state=directory
  with_items:
    - "{{ vertica_catalog_dir }}/{{ vertica_database_name }}"
  when: rebuild
  notify:
    - vertica | restart | restart all vertica services

- name: vertica | node_setup | Create vertica_config_dir, share, and log directories
  file: path={{item}} owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=0775 state=directory
  with_items:
    - "{{vertica_config_dir}}"
    - /opt/vertica/config/share
    - /opt/vertica/log
  notify:
    - vertica | restart | restart all vertica services

- name: vertica | node_setup | Add links for init.d scripts
  file: src={{ item.src }} dest={{ item.dest}} state=link
  with_items:
    - { dest: '/etc/init.d/vertica_agent', src: '/opt/vertica/sbin/vertica_agent' }
    - { dest: '/etc/init.d/verticad', src: '/opt/vertica/sbin/verticad' }
  notify:
    - vertica | restart | restart all vertica services

- name: Create file for EULA acceptance for vertica 7.2
  copy: src=vertica_7_2_eula.dat dest={{vertica_config_dir}}/d5415f948449e9d4c421b568f2411140.dat owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=0755
  notify:
    - vertica | restart | restart all vertica services

- name: vertica | node_setup | remove encrypted vertica license
  file: path={{vertica_config_dir}}/license.key.gpg state=absent

- name: vertica | node_setup | check if database exists
  command: /opt/vertica/bin/adminTools -t list_db -d {{ vertica_database_name }}
  sudo_user: dbadmin
  ignore_errors: yes
  environment: "{{vertica_env}}"
  register: vertica_db_exists_result

- name: vertica | node_setup | place encrypted vertica license
  copy: src=00002919_HP_Vertica_12TB.dat.gpg dest={{vertica_config_dir}}/license.key.gpg owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=0664
  when: vertica_db_exists_result | failed and not rebuild
  notify:
    - vertica | restart | restart all vertica services

- name: vertica | node_setup | remove original unencrypted vertica license
  file: path={{vertica_config_dir}}/license.key state=absent

- name: vertica | node_setup | remove unencrypted vertica license
  file: path={{vertica_config_dir}}/share/license.key state=absent

- name: vertica | node_setup | decrypt vertica license
  sudo_user: dbadmin
  command: gpg --passphrase {{ vertica_license_passphrase }} --batch --no-tty --output {{vertica_config_dir}}/license.key -d {{vertica_config_dir}}/license.key.gpg
  when: vertica_db_exists_result | failed and not rebuild
  no_log: True
  notify:
    - vertica | restart | restart all vertica services

# reads in the agent ssh keys from the first host as it will the use the same keys throughout the cluster
- name: vertica | node_setup | Set agent keys from the first host
  set_fact: vertica_agent_key="{{hostvars[vertica_group[0]].vertica_agent_key}}"  vertica_agent_cert="{{hostvars[vertica_group[0]].vertica_agent_cert}}" vertica_agent_pem="{{hostvars[vertica_group[0]].vertica_agent_pem}}"
  when: vertica_group is defined and  hostvars[vertica_group[0]].vertica_agent_key is defined and not rebuild
  notify:
    - vertica | restart | restart all vertica services

- name: vertica | node_setup | Check status of agent ssl file
  stat: path={{vertica_config_dir}}/share/agent.key
  register: agent_ssl_result
  when: vertica_agent_key is not defined
  notify:
    - vertica | restart | restart all vertica services

# generate keys on first host if not already generated
- name: vertica | node_setup | Generate agent ssl key
  shell: chdir={{vertica_config_dir}}/share {{ item }}
  with_items:
    - openssl genrsa 1024 > agent.key
    - openssl req -new -x509 -nodes -sha1 -days 36500  -key agent.key -subj '/C=US/ST=Massachusetts/L=Billerica/CN=www.vertica.com' > agent.cert
    - cat agent.cert agent.key > agent.pem
  when: agent_ssl_result is defined and not agent_ssl_result.stat.exists and not rebuild
  no_log: True
  notify:
    - vertica | restart | restart all vertica services

- name: vertica | node_setup | Read in agent key
  slurp: src={{vertica_config_dir}}/share/agent.key
  register: agent_key_result
  when: vertica_agent_key is not defined
  notify:
    - vertica | restart | restart all vertica services

- name: vertica | node_setup | Read in agent cert
  slurp: src={{vertica_config_dir}}/share/agent.cert
  register: agent_cert_result
  when: vertica_agent_cert is not defined
  notify:
    - vertica | restart | restart all vertica services

- name: vertica | node_setup | Read in agent pem
  slurp: src={{vertica_config_dir}}/share/agent.pem
  register: agent_pem_result
  when: vertica_agent_pem is not defined
  notify:
    - vertica | restart | restart all vertica services

# sets the agent keys on the first host
- name: vertica | node_setup | Set agent ssl variables
  set_fact: vertica_agent_key="{{agent_key_result.content | b64decode}}" vertica_agent_cert="{{agent_cert_result.content | b64decode}}" vertica_agent_pem="{{agent_pem_result.content | b64decode}}"
  when: vertica_agent_key is not defined and not rebuild
  notify:
    - vertica | restart | restart all vertica services

- name: vertica | node_setup | Create agent key
  copy: dest={{vertica_config_dir}}/share/agent.key owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=0400 content="{{vertica_agent_key}}"
  when: not rebuild
  notify:
    - vertica | restart | restart all vertica services

- name: vertica | node_setup | Create agent cert
  copy: dest={{vertica_config_dir}}/share/agent.cert owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=0400 content="{{vertica_agent_cert}}"
  when: not rebuild
  notify:
    - vertica | restart | restart all vertica services

- name: vertica | node_setup | Create agent pem
  copy: dest={{vertica_config_dir}}/share/agent.pem owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=0400 content="{{vertica_agent_pem}}"
  when: not rebuild
  notify:
    - vertica | restart | restart all vertica services

- name: vertica | node_setup | Using insecure default database ssl key
  copy: src=default_server.key dest=/var/vertica/server.key owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=0400 force=no
  when: vertica_server_key is not defined
  notify:
    - vertica | restart | restart all vertica services

- name: vertica | node_setup | Using insecure default database ssl crt
  copy: src=default_server.crt dest={{vertica_catalog_dir}}/../server.crt owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=0444 force=no
  when: vertica_server_crt is not defined
  notify:
    - vertica | restart | restart all vertica services

- name: vertica | node_setup | Create server key from variable
  copy: dest={{vertica_catalog_dir}}/../server.key owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=0400 content="{{vertica_server_key}}" force=no
  when: vertica_server_key is defined
  notify:
    - vertica | restart | restart all vertica services

- name: vertica | node_setup | Create server crt from variable
  copy: dest={{vertica_catalog_dir}}/../server.crt owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=0444 content="{{vertica_server_crt}}" force=no
  when: vertica_server_crt is defined
  notify:
    - vertica | restart | restart all vertica services

- name: vertica | node_setup | Change owner, group of logrotate directory
  file: path=/opt/vertica/config/logrotate state=directory owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=0775
