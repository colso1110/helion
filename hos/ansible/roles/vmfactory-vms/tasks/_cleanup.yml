# (c) Copyright 2016 Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
---
- name: vmfactory-vms | cleanup | destroy vm if running
  become: yes
  virt:
    command: destroy
    name: "{{ item.vm }}"
    uri: qemu:///system
  with_items: vmf_vms_to_cleanup
  failed_when: False
  when: vmf_create_status.failed and (vmf_create_status.stage in ['running'])

- name: vmfactory-vms | cleanup | delete any libvirt networks created for vm
  become: yes
  shell: |
    virsh net-destroy {{ item.1.name }}
    virsh net-undefine {{ item.1.name }}
  with_subelements:
    - vmf_vms_to_cleanup
    - net_bridge_info
  failed_when: False
  when: vmf_create_status.failed and (vmf_create_status.stage in ['running',
                                                                  'networks'])

- name: vmfactory-vms | cleanup | undefine vm if defined
  become: yes
  virt:
    command: undefine
    name: "{{ item.vm }}"
    uri: qemu:///system
  with_items: vmf_vms_to_cleanup
  failed_when: False
  when: vmf_create_status.failed and (vmf_create_status.stage in ['running',
                                                                  'networks',
                                                                  'defined'])

- name: vmfactory-vms | cleanup | delete qcow2 devices for VM
  become: yes
  file:
    state: absent
    path: "{{ vmf_dest_image_path }}/{{ item.0.vm }}disk{{ item.1.name
              | basename | replace('_root','') }}.qcow2"
  with_subelements:
    - vmf_vms_to_cleanup
    - disks
  failed_when: False
  when: vmf_create_status.failed and (vmf_create_status.stage in ['running',
                                                                  'networks',
                                                                  'defined',
                                                                  'qcow2s'])

- name: vmfactory-vms | cleanup | delete qcow2 devices for VM
  debug:
    msg: "Cleanup of failed VM '{{ item.vm }}' complete"
  with_items: vmf_create_status.vms
  when: vmf_create_status.failed
