#!/bin/bash
#
# (c) Copyright 2015-2016 Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# This script helps prune the Elasticsearch indices to prevent unchecked growth
# It has to be stored under /etc/cron.daily or /etc/cron.weekly

logfile={{ curator_log_path }}
dt="$(date +"%Y-%m-%d %H:%M:%S")\t\t"

es_log_partition={{ curator_es_partition }}
es_backup_enabled={% if curator_enable_backup %}true
{% else %}false
{% endif %}
es_backup_partition={{ curator_es_backup_partition }}
es_repo_name="{{ curator_backup_repo_name }}"
backup_done=false

# function to find the current used size of the ES parition
function get_current_es_partition_size()
{
  echo $(df -h $es_log_partition | tail -1 | awk '{print $5}' | grep -Po '[0-9]+' )
}

# function to backup es indices to a shared partition
function backup_es_indices()
{
  # if already backed up, just return
  [ $backup_done == true ] && return

  # if there is another back done earlier today, just return
  # this could happen either if this script is run from another node or
  # the water mark based deletion has kicked in
  backup_file_path="${es_backup_partition}/snapshot-curator-$(date +%Y%m%d)*"
  [ -f $backup_file_path ] && backup_done=true && return

  # check if backup is enabled
  if [ $es_backup_enabled == true ]; then
    echo -e "$dt Beginning backup of Elasticsearch indices..." >> $logfile
    repo_already_exists=$(es_repo_mgr --host {{ curator_es_hostname }} --port {{ curator_es_port }} show | grep -c $es_repo_name)
    if [ $repo_already_exists -eq 0 ]; then
      # create the repo
      echo -e "$dt Creating repository $es_repo_name ..." >> $logfile
      es_repo_mgr --host {{ curator_es_hostname }} --port {{ curator_es_port }} --logfile {{ curator_log_path }} create fs --repository $es_repo_name --location $es_backup_partition
    fi
    curator --host {{ curator_es_hostname }} --port {{ curator_es_port }} --logfile {{ curator_log_path }} snapshot --repository $es_repo_name indices --prefix logstash
    if [ $? -eq 0 ]; then
      backup_done=true
      echo -e "$dt Backup completed." >> $logfile
    else
      echo -e "$dt Backup failed! Please check Elasticsearch logs for more details." >> $logfile
    fi
  else
    echo -e "$dt Backup not enabled." >> $logfile
  fi
}


echo -e "$dt Running prune_es_indices cron script ..." >> $logfile

# first, check if this script should even run!
enable_pruning={{ curator_enable | bool }}
if [ $enable_pruning == False ]; then
  echo -e "$dt Pruning is not enabled. Exiting..." >> $logfile
  exit 1
fi

bin_name={{ curator_bin_path }}
# bail if another instance is running
if [ $(pidof -x $bin_name | wc -w) -gt 0 ]; then
  echo -e "$dt Curator is already running. Exiting..." >> $logfile
  exit 2
fi

# bail if curator is not installed
if [ ! -f $bin_name ]; then
  echo -e "$dt $bin_name not found. Is curator installed ? If so, please make sure the curator_bin_path variable is set correctly. Exiting..." >> $logfile
  exit 3
fi

# ready to run curator tasks now

low_watermark={{ curator_low_watermark_percent }}
high_watermark={{ curator_high_watermark_percent }}

current_level=$(get_current_es_partition_size)
if [ $current_level -gt $low_watermark ] && [ $current_level -lt $high_watermark ]; then
   echo -e "$dt WARNING: $es_log_partition running low (crossed $low_watermark%) on disk space! Please backup ES indices. Will delete old indices when usage reaches $high_watermark%!" >> $logfile
fi

num_of_indices_to_keep={{ curator_num_of_indices_to_keep }}

if [ $num_of_indices_to_keep -gt 0 ]; then
  # check if there are any old indices that needs to be pruned
  no_pruning_required=$(curator --host {{ curator_es_hostname }} --port {{ curator_es_port }} --logfile {{ curator_log_path }} show indices --regex "{{ curator_indices_regex }}" --older-than $num_of_indices_to_keep --time-unit days --timestring "%Y.%m.%d" | grep -c "No indices matched provided args")
  if [ $no_pruning_required -eq 0 ]; then
    # backup the indices first
    backup_es_indices
  fi

  echo -e "$dt Running curator to delete indices older than $num_of_indices_to_keep days old..." >> $logfile
  curator --host {{ curator_es_hostname }} --port {{ curator_es_port }} --logfile {{ curator_log_path }} delete indices --regex "{{ curator_indices_regex }}" --older-than $num_of_indices_to_keep --time-unit days --timestring "%Y.%m.%d"
fi

for i in $(seq $num_of_indices_to_keep -1 1); do
  current_level=$(get_current_es_partition_size)
  # check if we still need to make space
  if [ $current_level -gt $high_watermark ]; then
    backup_es_indices
    echo -e "$dt $es_log_partition is still over $high_watermark%.  Keeping the $i most recent indices and deleting the others..." >> $logfile
    curator --host {{ curator_es_hostname }} --port {{ curator_es_port }} --logfile {{ curator_log_path }} delete indices --regex "{{ curator_indices_regex }}" --older-than $i --time-unit days --timestring "%Y.%m.%d"
  fi
done

current_level=$(get_current_es_partition_size)
# check if we still need to make space
if [ $current_level -gt $high_watermark ]; then
  echo -e "$dt ERROR: $es_log_partition is still over $high_watermark%.  Please consider increasing the partition size for {{ curator_es_partition }}" >> $logfile
fi

# next, disable bloom filter, if required
disable_bloom_filter_days={{ curator_disable_bloom_filter_days | int }}
if [ $disable_bloom_filter_days -gt 0 ]; then
  curator --host {{ curator_es_hostname }} --port {{ curator_es_port }} --logfile {{ curator_log_path }} bloom indices --regex "{{ curator_indices_regex }}" --older-than {{ curator_disable_bloom_filter_days }} --time-unit days --timestring "%Y.%m.%d"
fi

# close indices, if required
close_indices_after_days={{ curator_close_indices_after_days | int }}
if [ $close_indices_after_days -gt 0 ]; then
  curator --host {{ curator_es_hostname }} --port {{ curator_es_port }} --logfile {{ curator_log_path }} close indices --regex "{{ curator_indices_regex }}" --older-than {{ curator_close_indices_after_days }} --time-unit days --timestring "%Y.%m.%d"
fi
